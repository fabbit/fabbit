<%= render "dropbox/breadcrumbs" %>

<h1> <%= @model.id %> </h1>
<div class="row versions">

  <ul>
    <li class="subtitle"> 
      <div class="dropbox"> Version number</div>
      <div class="date"> Last changed</div>
      <div class="action"> </div>
      <div class="message"> Commit message </div>
    </li>

    <!-- THIS NEEDS TO BE REPLACED. SHOULD DO A GET AND THen perform operations -->
    <% @history.each do |revision| %>
    <li>
      <div class="dropbox"> <%= revision[:rev] %> </div>
      <div class="date"> <%= revision[:modified].to_datetime.strftime("%B %d, %Y") %> </div>
      <div class=" <%= revision[:version] ? "action marked" : "action unmarked" %>" > </div>
      <div class="message"> <%= link_to revision[:details], revision[:version] %> </div>
    </li>
    <% end %>

  </ul>
</div>

<script type="text/javascript">

var dropbox_to_version = {};

function addMap(dropbox_id, version){
  console.log("DO THINGS");
  dropbox_to_version[dropbox_id] = version;
}


$(document).ready(function(){


  //UI METHODS YOU CAN IGNORE THESE
  //HOVER OVER for marked -> unmark
  $('.versions').on('hover', 'div.action.marked', function(event){
    event.preventDefault();
    if (event.type == "mouseenter"){
      $(this).addClass('unmark');
    } else {
       $(this).removeClass('unmark');
    }
    
  });

  //Add input on unmarked click
  $('.versions').on('click', 'div.action.unmarked', function(){
    var parent = $($(this).parent());
    var input_element = "<input type='text' placeholder='Enter commit message here'>";
    parent.find('.message').html(input_element);
    parent.find('.message').find('input').focus();
  });

  //Input enter just blurs it
  $('.versions .message').on('keyup', 'input', function(event){
    if (event.keyCode == 13) {
        $(this).blur();
    }
  });

  //Blur calls success
  $('.versions .message').on('blur', 'input', function(event){
    //TODO: BLUR IS BEING CALLED TWICE SO THATS TWO POSTS!!
    commiteRevision(this); 
  });

  //************* KEIEN YOU CAN START READING HERE ******************

  //MODEL FOR REVISIONS
  Revision = function(id, json) 
  {

    var modelID = id;
    var revision_id;
    var date;
    var version;
    var message;

    //Generates an object from the JSON passed into the objects creator
    function genFromJson(j){
      console.log("Gen rev from json");
      console.log(j);
      //TODO CLEAN!
      revision_id = j.rev;
      date =  j.modified;
      if (isNaN(parseInt(j.revision))) {
        version = null;
        message = "";
      } else {
        version = parseInt(j.revision);
        message = "TODO: How will i get this message? do another post request"; //KEIEN?
      }
    }

    this.revision_id = function(){
      return revision_id;
    }

    //Simply returns associated HTML for this revision model
    this.returnUI = function() {
      var rev_html = "";
      rev_html += "<div class='dropbox'>" + revision_id + "</div>";
      rev_html += "<div class='date'>" + date + "</div>";
      if (version === null) {
        rev_html += "<div class='action unmarked'></div>"
      } else {
         rev_html += "<div class='action marked'></div>"
         rev_html += "<div class='message'> <a href=\"/versions/" + version + '\">' + message + "</a></div>";
      }
      console.log("returning" + rev_html);
      return rev_html;
    }

    //Converts this revision model to a version, makes a POST request
    this.commit = function() {
      $.post('/model_files/' + modelID + '/versions', {"revision_number": revision_id, "details": message, "revision_date": date}, function(data){
        version = data.trim();
      });
    }

    //Rolls back this revision model to a version (no longer revision), makes a DEL request
    this.rollback = function() {
      $.ajax({
      url: '/versions/'+ version,
      type: 'DELETE',
      success: function(result) {
          version = null;
        }
      });
    }

    //initialize this bitch from its json
    genFromJson(json);
  }

  //THIS IS WHERE WE INTIALIZE EVERYTHING AND USE THE MODEL
  var revisionList = {};
  var modelID = "<%= @model.id %>"

  //Updates the revisions ui based on the revisionList
  function updateRevisionUI() {
    var save = $('.versions').find('.subtitle').html();
    var ul = $('.versions').find('ul');
    $(ul).html("<li class='subtitle'>" + save + "</li>");
    console.log(revisionList);
    for (var key in revisionList){
      console.log(revisionList[key]);
      $(ul).append("<li>" + revisionList[key].returnUI() + "</li>");
    }
  }

   //I go through all the revisions I have for this particular model_file and create objects for each (GET request)
  function initializeRevisions() {
    var r;
    $.getJSON('/model_files/' + modelID + '/dropbox_revisions', function(data)
    {
      console.log(data);
      for (var i =0; i < data.length; i++){
        var e = data[i];
        r = new Revision(modelID, e);
        console.log(r);
        revisionList[r.revision_id()] = r;
        console.log(revisionList);
      }
      updateRevisionUI();

    });
  }

  //Commits a specific revision to a version (tied to mark.click ui)
  function commitRevision(element) {
      var dropbox_id = message_element.parent().find('.dropbox').html().trim();
      revisionList[dropbox_id].commit();
      updateRevisionUI();
  }

  //Rolls back a specific version to a revision (tied to unmark click)
  $('.versions').on('click', 'div.action.marked.unmark', function(){
    var dropbox_id = $(this).parent().find('.dropbox').html().trim();
    revisionList[dropbox_id].rollback();
    updateRevisionUI();
  });
   
  //Initialize the revisions from db to start things off
  initializeRevisions();

});
</script>

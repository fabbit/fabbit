<%= render "layouts/header" %>
<%= render "dropbox/breadcrumbs" %>

<div class="row versions">

  <ul>
    <li class="subtitle"> 
      <div class="dropbox"> Version number</div>
      <div class="date"> Last changed</div>
      <div class="action"> </div>
      <div class="message"> Commit message </div>
    </li>

  </ul>
</div>

<script type="text/javascript">

$(document).ready(function(){


  //Model for list of revisions
  List = function() {
    var containerID = '.versions'; //TODO Actually use this
    var revisionList = {}; //map of dropbox id to revision class

    /* <!-- THIS NEEDS TO BE REPLACED. SHOULD DO A GET AND THen perform operations -->
    <% @history.each do |revision| %>
    <li>
      <div class="dropbox"> <%= revision[:rev] %> </div>
      <div class="date"> <%= revision[:modified].to_datetime.strftime("%B %d, %Y") %> </div>
      <div class=" <%= revision[:version] ? "action marked" : "action unmarked" %>" > </div>
      <div class="message"> <%= link_to revision[:details], revision[:version] %> </div>
    </li>
    <% end %>*/

    function instantiateRevisions() {
      "<% @history.each do |revision| %>"
      var r = new Revision("<%= @model.id  %>", {
        "rev" : "<%= revision[:rev] %>",
        "modified": "<%=revision[:modified].to_datetime.strftime('%B %d, %Y') %>",
        "version": "<%= revision[:version] ? revision[:version].id : 'null' %>",
        "details": "<%= revision[:version] ? revision[:version].details : 'null' %>"
      });
      revisionList[r.revision_id()] = r;
      "<% end %>"
    }

    //Updates the revisions ui based on the revisionList
    this.updateRevisionUI = function() {
      console.log("UPDATING UI!!!");
      var save = $('.versions').find('.subtitle').html();
      var ul = $('.versions').find('ul');
      $(ul).html("<li class='subtitle'>" + save + "</li>");
      console.log(revisionList);
      for (var key in revisionList){
        console.log(revisionList[key]);
        $(ul).append("<li>" + revisionList[key].returnUI() + "</li>");
      }
    }

    //Commits a specific revision to a version (tied to mark.click ui)
    this.commitRevision = function(message_element) {
      console.log($(message_element));
        var dropbox_id = $(message_element).parent().parent().find('.dropbox').html().trim();
        revisionList[dropbox_id].commit($(message_element).val());
    }

    //Rolls back a specific version to a revision (tied to unmark click)
    $('.versions').on('click', 'div.action.marked.unmark', function(){
      var dropbox_id = $(this).parent().find('.dropbox').html().trim();
      console.log(revisionList);
      revisionList[dropbox_id].rollback();
    });

    instantiateRevisions();
  }

  //Model for revisions
  Revision = function(id, json) 
  {

    var modelID = id;
    var revision_id;
    var date;
    var version;
    var message;

    //Generates an object from the JSON passed into the objects creator
    function genFromJson(j){
      console.log("Gen rev from json");
      console.log(j);
      //TODO CLEAN!
      revision_id = j.rev;
      date =  j.modified;
      if (isNaN(parseInt(j.version))) { //TODO: make this cleanar
        version = null;
        message = "";
      } else {
        version = parseInt(j.version);
        message = j.details;
      }
    }

    this.revision_id = function(){
      return revision_id;
    }

    //Simply returns associated HTML for this revision model
    this.returnUI = function() {
      var rev_html = "";
      rev_html += "<div class='dropbox'>" + revision_id + "</div>";
      rev_html += "<div class='date'>" + date + "</div>";
      if (version === null) {
        rev_html += "<div class='action unmarked'></div>"
        rev_html += "<div class='message'> </div>"
      } else {
         rev_html += "<div class='action marked'></div>"
         rev_html += "<div class='message'> <a href=\"/versions/" + version + '\">' + message + "</a></div>";
      }
      console.log("returning" + rev_html);
      return rev_html;
    }

    //Converts this revision model to a version, makes a POST request
    this.commit = function(msg) {
      var j = {"revision_number": revision_id, "details": msg, "revision_date": date};
      $.post('/model_files/' + modelID + '/versions', j , function(data){
        console.log("COMMITED - DATA IS:");
        console.log(data);
        version = data.trim();
        message = msg;
        list.updateRevisionUI();
      });
    }

    //Rolls back this revision model to a version (no longer revision), makes a DEL request
    this.rollback = function() {
      $.ajax({
      url: '/versions/'+ version,
      type: 'DELETE',
      success: function(result) {
          version = null;
          message = "";
          list.updateRevisionUI();
        }
      });
    }

    //initialize this bitch from its json
    genFromJson(json);
  }
   
  var list = new List();
  list.updateRevisionUI();

  //UI METHODS to add/remove input
  //HOVER OVER for marked -> unmark
  $('.versions').on('hover', 'div.action.marked', function(event){
    event.preventDefault();
    if (event.type == "mouseenter"){
      $(this).addClass('unmark');
    } else {
       $(this).removeClass('unmark');
    }
    
  });

  //Add input on unmarked click
  $('.versions').on('click', 'div.action.unmarked', function(){
    console.log("click");
    var parent = $($(this).parent());
    var input_element = "<input type='text' placeholder='Enter commit message here'>";
    parent.find('.message').html(input_element);
    parent.find('.message').find('input').focus();
  });

  //Input enter just blurs it
  $('.versions .message').on('keyup', 'input', function(event){
    if (event.keyCode == 13) {
        $(this).blur();
    }
  });

  //Blur calls success
  $('.versions .message').on('blur', 'input', function(event){
    //TODO: BLUR IS BEING CALLED TWICE SO THATS TWO POSTS!!
    list.commitRevision(this); 
  });

  

});
</script>
